// Code was aquired here: 
https://social.msdn.microsoft.com/Forums/en-US/1b674218-2164-4a87-b768-1d17c3f08ec8/how-to-create-a-line-chart-in-c?forum=csharpgeneral
// Props to the writer, it goes into detail on how to change line color
// as well as x,y axis names and how to load int to the data points
// 1-16-2020 Made into class 
class CreateLineChart
    {
        private Ecu_Block_Group[] graphData;
        private Chart logChart;
        private double[] X;
        public double[] x => X;
        public double[] y => Y;
        private double[] Y;
        public CreateLineChart(Ecu_Block_Group[] data)
        {
            graphData = data;
            // Load the double arrays asap
            // X = RPM
            Y = LoadDoubleArray(4, X, graphData[4].data.Count);
            // Y = Lamda Control
            X = LoadDoubleArray(2, Y, graphData[2].data.Count);
        }

        // Code was aquired here: 
        // https://social.msdn.microsoft.com/Forums/en-US/1b674218-2164-4a87-b768-1d17c3f08ec8/how-to-create-a-line-chart-in-c?forum=csharpgeneral
        // Props to the writer, it goes into detail on how to change line color
        // as well as x,y axis names and how to load int to the data points

        // Create and align our graph called chart in C#.
        public Chart CreateGraph()
        {
            //  We set up the chart 
            logChart = new Chart();
            logChart.Location = new Point(10, 10);
            logChart.Width = 700;
            logChart.Height = 400;
            logChart.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Top;
            // This has to be called in the Form 1 Method 
            //this.Controls.Add(logChart);
            ECU_Block_Series();
            return logChart;
        }

        private void ECU_Block_Series()
        {
            // Chart Area   
            ChartArea cA = new ChartArea();
            // This is the name of the Chart area...title?
            cA.Name = "Test";
            logChart.ChartAreas.Add(cA);
            cA.BackColor = Color.Azure;
            cA.BackGradientStyle = GradientStyle.HorizontalCenter;
            cA.BackHatchStyle = ChartHatchStyle.LargeGrid;
            cA.BorderDashStyle = ChartDashStyle.Solid;
            cA.BorderWidth = 1;
            cA.BorderColor = Color.Black;
            cA.ShadowColor = Color.Purple;
            cA.ShadowOffset = 0;
            logChart.ChartAreas[0].Axes[0].MajorGrid.Enabled = false;//x axis
            logChart.ChartAreas[0].Axes[1].MajorGrid.Enabled = false;//y axis

            //Cursor：only apply the top area
            cA.CursorX.IsUserEnabled = true;
            cA.CursorX.AxisType = AxisType.Primary;//act on primary x axis
            cA.CursorX.Interval = 1;
            cA.CursorX.LineWidth = 1;
            cA.CursorX.LineDashStyle = ChartDashStyle.Dash;
            cA.CursorX.IsUserSelectionEnabled = true;
            cA.CursorX.SelectionColor = Color.Yellow;
            cA.CursorX.AutoScroll = true;

            cA.CursorY.IsUserEnabled = true;
            cA.CursorY.AxisType = AxisType.Primary;//act on primary y axis
            cA.CursorY.Interval = 1;
            cA.CursorY.LineWidth = 1;
            cA.CursorY.LineDashStyle = ChartDashStyle.Dash;
            cA.CursorY.IsUserSelectionEnabled = true;
            cA.CursorY.SelectionColor = Color.Yellow;
            cA.CursorY.AutoScroll = true;

            // Axis

            double yMin = Convert.ToDouble(GetMin("min", 4));
            double yMax = Convert.ToDouble(GetMin("max", 4));
            // This here will be changed as well (min and max from the array/list
            cA.AxisY.Minimum = yMin;//Y axis Minimum value
            cA.AxisX.Maximum = yMax;
            cA.AxisY.Interval = 300;
            cA.AxisY.Title = @graphData[4].name;
            // X Axis min
            double xMin = Convert.ToDouble(GetMin("min", 2));
            cA.AxisX.Minimum = xMin;//X axis Minimum value
            double xMax = Convert.ToDouble(GetMin("max", 2));
            cA.AxisX.Maximum = xMax;

            cA.AxisX.IsLabelAutoFit = true;
            cA.AxisX.LabelAutoFitMinFontSize = 5;
            cA.AxisX.LabelStyle.Angle = -20;
            cA.AxisX.LabelStyle.IsEndLabelVisible = true;//show the last label

            //  Interval Can change as well
            cA.AxisX.Interval = 5;

            cA.AxisX.IntervalAutoMode = IntervalAutoMode.FixedCount;
            cA.AxisX.IntervalType = DateTimeIntervalType.NotSet;
            //  We Measure RPM against all of it
            // X axis should always be rpm
            //
            //cA.AxisX.Title = @"RPM";
            // Change to be dynamic 
            //
            cA.AxisX.Title = @graphData[2].name;
            //
            // 
            cA.AxisX.TextOrientation = TextOrientation.Auto;
            cA.AxisX.LineWidth = 2;
            cA.AxisX.LineColor = Color.DarkOrchid;
            cA.AxisX.Enabled = AxisEnabled.True;
            cA.AxisX.ScaleView.MinSizeType = DateTimeIntervalType.Months;
            cA.AxisX.ScrollBar = new AxisScrollBar();


            //Series
            Series series1 = new Series();
            series1.ChartArea = "Test";
            logChart.Series.Add(series1);

            //Series style
            series1.Name = @"series：Test";
            series1.ChartType = SeriesChartType.Line;  // type
            series1.BorderWidth = 2;
            series1.Color = Color.Green;
            series1.XValueType = ChartValueType.Int32;//x axis type
            series1.YValueType = ChartValueType.Int32;//y axis type


            //Marker
            series1.MarkerStyle = MarkerStyle.Star4;
            series1.MarkerSize = 10;
            series1.MarkerStep = 1;
            series1.MarkerColor = Color.Red;
            series1.ToolTip = @"ToolTip";

            //Label
            series1.IsValueShownAsLabel = true;
            series1.SmartLabelStyle.Enabled = false;
            series1.SmartLabelStyle.AllowOutsidePlotArea = LabelOutsidePlotAreaStyle.Yes;
            series1.LabelForeColor = Color.Gray;
            series1.LabelToolTip = @"LabelToolTip";

            //Empty Point Style 
            DataPointCustomProperties p = new DataPointCustomProperties();
            p.Color = Color.Green;
            series1.EmptyPointStyle = p;

            //Legend
            series1.LegendText = "LegendText：Test";
            series1.LegendToolTip = @"LegendToolTip";

            // Here is where the data will go
            // This will be changed

            float[] values = { 0, 70, 90, 20, 70, 220, 30, 60, 30, 81, 10, 39 };
            float[] test = { 1000, 2000, 3000, 4000, 500, 600, 700, 800, 900, 1000, 2000, 1000 };
            double damn = GetMin("x", 4);
            double damn2 = GetMin("y", 2);
            double[] xValues = X;
            double[] yValues = Y;
            // This will change as well for the sake of formatting as well 
            // These are the plotted data points
            //int x = 100;
            for (int i = 0; i < X.Length; i++)
            {

                series1.Points.AddXY(xValues[i], yValues[i]);


                //x += 100;
            }
        }

        public double GetMin(string minOrMax, int index)
        {

            double min = 0;
            double[] temp = new double[graphData[index].data.Count];
            
            for (int i = 0; i < graphData[index].data.Count; i++)
            {
                temp[i] = Convert.ToDouble(graphData[index].data[i]);
                
            }
            if (minOrMax == "min")
            {

                min = temp.Min();
                return min;
            }
            else if (minOrMax == "max")
            {
                return min = temp.Max();
            }

            return 0.0;
        }

        private double[] LoadDoubleArray(int index, double[] num, int length)
        {
            num = new double[length];
            for (int i = 0; i < length; i++)
            {
                num[i] = Convert.ToDouble(graphData[index].data[i]);
            }
            return num;
        }
    }
